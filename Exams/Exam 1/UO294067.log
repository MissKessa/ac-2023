=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2023.10.30 12:14:01 =~=~=~=~=~=~=~=~=~=~=~=
login as: student
student@localhost's password: 
Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-210-generic i686)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

12 packages can be updated.
2 updates are security updates.


Last login: Thu Oct 26 19:20:15 2023 from 10.0.2.2
student@2ac:~$ cdls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ cdls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  prueba
student@2ac:~$ ls
1-1text.txt  2ac-l.i-2-uo294067  files-Batch2  prueba
student@2ac:~$ cd files-Batch2/
student@2ac:~/files-Batch2$ ls
data.xls  exercise1.c  exercise2.c  exercise3.asm  exercise4.asm  exercise5.c
student@2ac:~/files-Batch2$ ulimit -c unlimited
student@2ac:~/files-Batch2$ gdb gcc -c exercise5.c -g
student@2ac:~/files-Batch2$ gcc exercise5.o -o exercise5
student@2ac:~/files-Batch2$ ./exercise5
Segmentation fault (core dumped)
student@2ac:~/files-Batch2$ gbfdb 2exercise5 core
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from exercise5...done.
[New LWP 1677]
Core was generated by `./exercise5'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __GI___libc_free (mem=0xa) at malloc.c:2958
2958malloc.c: No such file or directory.
(gdb) quit
student@2ac:~/files-Batch2$ student@2ac:~/files-Batch2$ ls
core      exercise1.c  exercise3.asm  exercise5    exercise5.o
data.xls  exercise2.c  exercise4.asm  exercise5.c
student@2ac:~/files-Batch2$ ls
core      exercise1.c  exercise3.asm  exercise5    exercise5.o
data.xls  exercise2.c  exercise4.asm  exercise5.c
student@2ac:~/files-Batch2$ ls
core      exercise1.c  exercise3.asm  exercise5    exercise5.o
data.xls  exercise2.c  exercise4.asm  exercise5.c
student@2ac:~/files-Batch2$ ls
core      exercise1.c  exercise3.asm  exercise5    exercise5.o
data.xls  exercise2.c  exercise4.asm  exercise5.c
student@2ac:~/files-Batch2$ ls
core      exercise1.c  exercise3.asm  exercise5    exercise5.o
data.xls  exercise2.c  exercise4.asm  exercise5.c
student@2ac:~/files-Batch2$ student@2ac:~/files-Batch2$ lsgdb exercise5 coregcc exercise2.c -pg -o exercise2
student@2ac:~/files-Batch2$ grpof ./exaercise2 >exa2-gprof-.txt
No command 'grpof' found, did you mean:
 Command 'gprof' from package 'binutils-multiarch' (main)
 Command 'gprof' from package 'binutils' (main)
grpof: command not found
student@2ac:~/files-Batch2$ grpof ./exercise2 >exa2-gprof.txtr
gmon.out: No such file or directory
student@2ac:~/files-Batch2$ klls
core  data.xls  exa2-gprof.txt  exercise1.c  exercise2  exercise2.c  exercise3.asm  exercise4.asm  exercise5  exercise5.c  exercise5.o
student@2ac:~/files-Batch2$ lsgprof ./exercise2 >exa2-gprof.txtexa2-gprof.txt>exa2-gprof.txt exa2-gprof.txt
gmon.out: No such file or directory
student@2ac:~/files-Batch2$ gcc exercise2.c -pg -o exercise2
student@2ac:~/files-Batch2$ gcc exercise2.c exercsie1ise2.c -o exercise2
/tmp/ccOir5Zg.o: In function `fillArrayWithRandomNumbers':
exercise2.c:(.text+0x0): multiple definition of `fillArrayWithRandomNumbers'
/tmp/ccb0sIpp.o:exercise2.c:(.text+0x0): first defined here
/tmp/ccOir5Zg.o: In function `performRandomOperations':
exercise2.c:(.text+0xb7): multiple definition of `performRandomOperations'
/tmp/ccb0sIpp.o:exercise2.c:(.text+0xb7): first defined here
/tmp/ccOir5Zg.o: In function `performRandomMathCalculations':
exercise2.c:(.text+0x138): multiple definition of `performRandomMathCalculations'
/tmp/ccb0sIpp.o:exercise2.c:(.text+0x138): first defined here
/tmp/ccOir5Zg.o: In function `processData':
exercise2.c:(.text+0x1da): multiple definition of `processData'
/tmp/ccb0sIpp.o:exercise2.c:(.text+0x1da): first defined here
/tmp/ccOir5Zg.o: In function `main':
exercise2.c:(.text+0x274): multiple definition of `main'
/tmp/ccb0sIpp.o:exercise2.c:(.text+0x274): first defined here
collect2: error: ld returned 1 exit status
student@2ac:~/files-Batch2$ nano -c excerercise1.c
[ Reading File ][ Read 171 lines ]  GNU nano 2.5.3                                                                  File: exercise1.c                                                                                                                                          #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION///////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = ** GAP 1 **;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);void MatrixMultiplication(unsigned int, double **, double **, double **);double ** MatrixInitialization(unsigned int, int, unsigned int);void DestroyMatrix(unsigned int, double **);#ifdef MULTI_THREADED#include <pthread.h>void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurement** GAP 2 **^G Get Help^O Write Out^W Where Is^K Cut Text^J Justify^C Cur Pos^Y Prev PageM-\ First Line    M-W WhereIs Next  ^^ Mark TextM-} Indent Text   M-U Undo^B Back^X Exit^R Read File^\ Replace^U Uncut Text     ^T To Spell^_ Go To Line     ^V Next PageM-/ Last Line     M-] To Bracket    M-^ Copy Text     M-{ Unindent Text M-E Redo^F Forward[ line 2/172 (1%), col 1/20 (5%), char 19/3605 (0%) ]3183142957[ line 5/172 (2%), col 1/1 (100762 [ line 6/172 (3%), col 1/58 (17[ line 7/172 (4%), col 1/39 (2%), char 1353858 (17449525 (42326[ line 101 (100%), char 257/3605 (7%) ] [ line 11/172 (6%), col 1/58 (18230 (331683758 (149[ line 14/172 (8%), col 1/38 (2%), char 404/3605 (1151 (100%), char 442/3605 (12%) ]69375 (6%), char 4442/15 (13%), char 445/3605 (12%) ]3/15 (2064675/15 (3386/15 (40976508/15 (5319/15 (602[ line 17/172 (9%), col 10631/15 (7342/15 (8053664/15 (9375/15 (100%), char 458/3605 (12%) ] [ line 18/172 (10%), col 1/16 (6%), char 459[ line 18/172 (10%), col 2/16 (12603814/16 (2525/16 (3136747/16 (4358/16 (506967 [ line 17/172 (95 (605261/1 (104358249/38 (2311[ line 14/172 (8%), col 10631842/38 (3153464675986/38 (42974208719/38 (50220231542753/38 (6064375586897/38 (7130831962308321/38 (8142453664975/38 (92864977408/38 (100%), char 441/3605 (12%) ]7/38 (97%), char 4406439Modified;5/378/3604*;4/367/3603*;3/356/3602*;2/345/3601*;1/33 (934/3600G*;0/323/3599*;29/312/3598*;8/301/3597 (11;7/290/3596;6/28 (9229/3595;7 (9647;7/2830/35951;8/291/35967;9/302/3597 (128;30/313/35989;1/324/35993;2/335/36004;3/34 (976/3601 [ line 15/172 (8%), col 1/1 (1008699[ line 17/172 (9%), col 15/15 (100%), char 454/3601 (12%) ][ line 18/172 (106/16703 [ line 19/172 (11%), col 1/1 (100%), char 471[ line 20/172 (11%), col 28/28 (100%), char 499/3601 (13%) ]125/255244 [ line 22/172 (12%), col 1/1 (100%), char 5253333/74 (44%), char 558/3601 (15%) ]465 (5063275445 (73979651/1 (100%), char 710[ line 27/172 (15%), col 22/22 (100%), char 732/3601 (20%) ]861/2153 [ line 29/172 (16%), col 1/1 (100%), char 75430751833/37 (89%), char 781/3601 (21%) ][ line 32/172 (18%), col 10/10 (1008 [ line 33/172 (19%), col 33/66 (58072[ line 34/172 (19%), col 33/33 (1059352029/29744610/107 [ line 37/172 (21%), col 7/7 (100%), char 884821/1596[ line 40/172 (23%), col 33/33 (100%), char 919/3601 (25%) ] [ line 41/172 (23%), col 2/2 (100%), char 921{2433/45 (73%), char 947/3601 (26%) ]350 (8285749/9 (100%), char 994[ line 45/172 (26%), col 33/38 (861020/3601 (28%) ]60/30 (100%), char 1048/3601 (29%) ] [ line 47/172 (27%), col 9/9 (100%), char 1050[ line 48/172 (27%), col 30/30 (100%), char 1073/3601 (29%) ]9825/25913050930/3010713/60 (55%), char 1133/3601 (31%) ]23015/15 (100%), char 1168/3601 (32%) ] [ line 53/172 (30%), col 1/1 (100%), char 1169[ line 54/172 (31%), col 33/38 (86953 [ line 55/172 (31%), col 9/9 (100202[ line 56/172 (32%), col 33/33 (100%), char 1228/3601 (34%) ]7320/2041 [ line 58/172 (33%), col 9/9 (100%), char 1243** GAP 2 **#ifdef MULTI_THREADEDpthread_t Threads[nThreads];// Initializing threadsfor (int i = 0; i < nThreads; i++){int pthread_ret = pthread_create(&Threads[i], NULL, ThreadJob, &nElements);if (pthread_ret){fprintf(stderr, "ERROR: pthread_create error code: %d.\n", pthread_ret);exit(EXIT_FAILURE);}}// Wait until all threads are finishedfor (int i = 0; i < nThreads; i++){pthread_join(Threads[i], NULL);}#else// Executed in the same thread as the programTask(nElements);#endif// Finish time measurement** GAP 3 **// Show the execution time** GAP 4 ** return 0;[ line 59/172 (34%), col 22/22 (100%), char 1265/3601 (35%) ] [ line 58/172 (33%), col 9/9 (100%), char 1243/3601 (34%) ][ line 57/172 (33%), col 20/20 (100%), char 1241/3601 (34%) ] 19/190/3600 8/1839/3599 7/178/3598 6/167/3597 5/156/3596 4/145/3595G3/134/3594 2/123/3593 1/112/3592 0/101/3591   [ line 57/172 (33%), col 9/9 (100%), char 1230/3590clock_gettime(CLOCK_REALTIME, &tStart);8/1731/170/363949 (11%), char 1271/3630 (35%) ]6022 (431537 (29522 (33263643 (2507410 (10%), char 1386/3630 (38%) ]5792 (1%), char 13896833 (346740718 (5868997 (1901944 (25663704018 (589110 (10%), char 1593/3630 (43%) ]2 (1063247 (2%), char 1597436355310 (10%), char 1673/3630 (46%) ]648 (2%), char 16767410 (10%), char 1710/3630 (47%) ]856 (16%), char 1713954 (1980625 (466817 (1849271 (100%), char 1791/3630 (49%) ]335 (2%), char 17924820 (582050591 (100%), char 1833/3630 (50%) ]4820 (5%), char 18209/20 (45%), char 1821/3630 (50%) ]19 (47298 (5087 (5276 (566P 3 **5 (605 3 **4 (6443 (693 **2 (7521 (811* 0 (900  9 (1019 clock_gettime(CLOCK_REALTIME, &tEnd);[ line 84/173 (48%), col 46/46 (100%), char 1858/3656 (50%) ] [ line 85/173 (49%), col 1/1 (100%), char 1859[ line 86/173 (49%), col 35/35 (100%), char 1887/3656 (51%) ]75020/20900 [ line 88/173 (50%), col 9/9 (100%), char 1902/3656 (52%) ]pthread_t Threads[nThreads];// Initializing threadsfor (int i = 0; i < nThreads; i++){int pthread_ret = pthread_create(&Threads[i], NULL, ThreadJob, &nElements); if (pthread_ret) {fprintf(stderr, "ERROR: pthread_create error code: %d.\n", pthread_ret);exit(EXIT_FAILURE); } }// Wait until all threads are finished for (int i = 0; i < nThreads; i++){ pthread_join(Threads[i], NULL); }#else// Executed in the same thread as the programTask(nElements);#endif// Finish time measurementclock_gettime(CLOCK_REALTIME, &tEnd); Show the execution time** GAP 4 ** return 0;}void Task(unsigned int nElements){double  ** matrixA,** matrixB,** matrixResult;// InitializationmatrixA = MatrixInitialization(nElements, TRUE, time(NULL));matrixB = MatrixInitialization(nElements, TRUE, time(NULL));matrixResult = MatrixInitialization(nElements, FALSE, 0);if (!matrixA || !matrixB || !matrixResult){ fprintf(stderr, "ERROR in Task: Cannot allocate memory\n");exit(EXIT_FAILURE);MultiplicationMatrixMultiplication(nElements, matrixA, matrixB, matrixResult);// DesctructionDestroyMatrix(nElements, matrixA);DestroyMatrix(nElements, matrixB);DestroyMatrix(nElements, matrixResult);}double getRandom(unsigned int min, unsigned int max)[ line 89/173 (51%), col 18/18 (100%), char 1913/3656 (52%) ] [ line 88/173 (50%), col 9/9 (100%), char 1902[ line 87/173 (50%), col 20/20 (100%), char 1900/3656 (51%) ] 19/19899/3655 8/188/3654 7/177/3653 6/166/3652 5/155/3651 4/144/3650G3/133/3649 2/122/3648 1/111/3647 0/100/3646   [ line 87/173 (50%), col 9/9 (100%), char 1889/3645dElapsedTimeS = (tEnd.tv_sec - tStart.tv_sec);dElapsedTimeS += (tEnd.tv_nsec - tStart.tv_nsec) / 1e+9;[ line 88/174 (50%), col 57/57 (100%), char 1992/3748 (53%) ]6/57 (98%), char 19915604489328 [ line 88/174 (50%), col 1/57 (1%), char 1936/3748 (51%) ] dElapsedTimeS += (tEnd.tv_nsec - tStart.tv_nsec) / 1e+9;9/65 (13%), char 1937/3749 (51%) ]File Name to Write: exercise1.c                                                                                                                                                                                                                                     M-D DOS Format                  M-A AppendM-B Backup FileC Cancel                       M-M Mac Format    M-P Prepend^T To Files [ Wrote 173 lines ]        ^O Write Out^W Where Is       ^K Cut Text^J Justify^C Cur Pos        ^Y Prev PageM-\ First Line    M-W WhereIs Next  ^^ Mark TextM-} Indent Text   M-U Undo^B BackX Exit  ^R Read File^\ Replace        ^U Uncut Text     ^T To Spell^_ Go To Line     ^V Next PageM-/ Last Line     M-] To Bracket    M-^ Copy Text     M-{ Unindent Text M-E Redo^F Forward[ line 87/174 (50%), col 9/55 (16%), char 1889/3749 (50%) ]64935 (256149581/1 (1005949/46 (192183735 (25793721/1 (1001167/70059/25 (36677954 (1205846/6 (1001879/10 (916348 (186774510 (9044243 (2383317 (1959221/1 (1006109/10 (9408 (50693944 (2671897 (9%), char 1491/3749 (39%) ]7818 (50%), char 1487/3749 (39%) ]6733 (2768592 (9%), char 1390/3749 (37%) ]4610 (90%), char 1387/3749 (36%) ]343 (2512532 (2826517 (24294void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurementclock_gettime(CLOCK_REALTIME, &tStart);#ifdef MULTI_THREADED0422 (40815939 (1072381/10729/48 (1832633 (2704519 (1002438 (231711301/1 (100692299/15 (620160 (1509290830 (300934925 (367588730 (305279 (1006630 (3277558 (23996/3749 (26%) ]49 (10043440 (2261525 (20234132/2 (101029/33 (278953391/1 (1008681577/74609/10 (976529 (3161241933 (27423866 (137901210 (908701737 (245#include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION///////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);void MatrixMultiplication(unsigned int, double **, double **, double **);double ** MatrixInitialization(unsigned int, int, unsigned int);void DestroyMatrix(unsigned int, double **);#ifdef MULTI_THREADED#include <pthread.h> //Start time measurement clock_gettime(CLOCK_REALTIME, &tStart);01/1 (1005296489/21 (424119752 (4019641/1 (100859/45 (267374365 (13086374 (125344221/1 (1002519/25 (36083018 (3248021901/1 (1007189/16 (5663 [ line 17/174 (95 (6048161/1 (103958849/34 (261203758 (153549%) ]File Name to Write: exercise1.c                                                                                                                                                                                                                                     M-D DOS Format                  M-A AppendM-B Backup FileC Cancel                       M-M Mac Format    M-P Prepend^T To Files [ Wrote 173 lines ]^O Write Out^W Where Is       ^K Cut Text^J Justify^C Cur Pos        ^Y Prev PageM-\ First Line    M-W WhereIs Next  ^^ Mark TextM-} Indent Text   M-U Undo^B BackX Exit  ^R Read File^\ Replace        ^U Uncut Text     ^T To Spell^_ Go To Line     ^V Next PageM-/ Last Line     M-] To Bracket    M-^ Copy Text     M-{ Unindent Text M-E Redo^F Forwardstudent@2ac:~/files-Batch2$ .time :7.ggcc -c exercise1.c
student@2ac:~/files-Batch2$ gcc exercise1.o -o exercise1
student@2ac:~/files-Batch2$ ls
core  data.xls  exa2-gprof.txt  exercise1  exercise1.c  exercise1.o  exercise2.c  exercise3.asm  exercise4.asm  exercise5  exercise5.c  exercise5.o
student@2ac:~/files-Batch2$ time ./exercise1
Running task    : 
real0m0.025s
user0m0.024s
sys0m0.000s
student@2ac:~/files-Batch2$ student@2ac:~/files-Batch2$ time ./exercise1
Running task    : 
real0m0.025s
user0m0.024s
sys0m0.000s
student@2ac:~/files-Batch2$ time ./exercise1
Running task    : 
real0m0.027s
user0m0.024s
sys0m0.000s
student@2ac:~/files-Batch2$ time ./exercise1
Running task    : 
real0m0.026s
user0m0.024s
sys0m0.000s
student@2ac:~/files-Batch2$ time ./exercise1
Running task    : 
real0m0.025s
user0m0.024s
sys0m0.000s
student@2ac:~/files-Batch2$ cp exercise1.c
cp: missing destination file operand after 'exercise1.c'
Try 'cp --help' for more information.
student@2ac:~/files-Batch2$ cp exercise1.c.exercise1.c/exercise1.c ./exercise1_mh.c
student@2ac:~/files-Batch2$ ls
core            exercise1.c     exercise3.asm  exercise5.o
data.xls        exercise1_mh.c  exercise4.asm
exa2-gprof.txt  exercise1.o     exercise5
exercise1       exercise2.c     exercise5.c
student@2ac:~/files-Batch2$ nano -c exercise1_mh.c 
[ Reading File ][ Read 173 lines ]  GNU nano 2.5.3          File: exercise1_mh.c                          #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION///////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify^X Exit^R Read File  ^\ Replace    ^U Uncut Text ^T To Spell[ line 2/174 (1%), col 1/20 (5%), char 19/3749 (0%) ]31831429575 (100%), char 76/3749 (2%) ]6358 (1%), char 777439 (2135/3749 (3%) ]858 (17449525 (42326[ line 101 (100%), char 257/3749 (6%) ] [ line 925 (4%), char 232Modified/#define MULTI_THREADED48#define37File Name to Write: exercise1_mh.c                                      M-D DOS FormatM-A Append    M-B Backup FileC Cancel     M-M Mac FormatM-P Prepend   ^T To Files [ Wrote 173 lines ]        ^O Write Out  ^W Where Is   ^K Cut Text   ^J JustifyX Exit       ^R Read File  ^\ Replace    ^U Uncut Text ^T To Spell  GNU nano 2.5.3          File: exercise1_mh.c                          #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION/////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);  [ Wrote 173 lines ]^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify^X Exit^R Read File  ^\ Replace    ^U Uncut Text ^T To Spell  GNU nano 2.5.3          File: exercise1_mh.c                          #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION/////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);  [ Wrote 173 lines ]^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify^X Exit^R Read File  ^\ Replace    ^U Uncut Text ^T To Spellvoid MatrixMultiplication(unsigned int, double **, double **, double **$double ** MatrixInitialization(unsigned int, int, unsigned int);void DestroyMatrix(unsigned int, double **);#ifdef MULTI_THREADED#include <pthread.h>void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurementclock_gettime(CLOCK_REALTIME, &tStart);[ line 9/174 (5%), col 1/23 (4%), char 232/3747 (6%) ]^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify^X Exit^R Read File  ^\ Replace    ^U Uncut Text ^T To Spell  GNU nano 2.5.3          File: exercise1_mh.c                          #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION/////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);void MatrixMultiplication(unsigned int, double **, double **, double **$double ** MatrixInitialization(unsigned int, int, unsigned int);void DestroyMatrix(unsigned int, double **);#ifdef MULTI_THREADED#include <pthread.h>void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurementclock_gettime(CLOCK_REALTIME, &tStart);[ line 9/174 (5%), col 1/23 (4%), char 232/3747 (6%) ]^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify^X Exit^R Read File  ^\ Replace    ^U Uncut Text ^T To Spell  GNU nano 2.5.3          File: exercise1_mh.c                          #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION/////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);void MatrixMultiplication(unsigned int, double **, double **, double **$double ** MatrixInitialization(unsigned int, int, unsigned int);void DestroyMatrix(unsigned int, double **);#ifdef MULTI_THREADED#include <pthread.h>void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurementclock_gettime(CLOCK_REALTIME, &tStart);[ line 9/174 (5%), col 1/23 (4%), char 232/3747 (6%) ]^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify^X Exit^R Read File  ^\ Replace    ^U Uncut Text ^T To Spell       File: exercise1_mh.c                      ); [ line 9/174 (5%), col 1/23 (4%), char 232/3747 (6%) ]^G Get Help    ^O Write Out   ^W Where Is    ^K Cut Text    ^J Justify     ^C Cur Pos^X Exit^R Read File   ^\ Replace     ^U Uncut Text  ^T To Spell    ^_ Go To Line[ line 101 (100%), char 255/3747 (6%) ]1658 (1%), char 256230 (331483758 (1494834 (240210%) ][ line 15/174 (8%), col 1/1 (100361697 [ line 17/174 (9%), col 1/15 (68[ line 18/174 (1065329 (100%), char 469/3747 (12%) ]20128 (3%), char 470125 (498321 (100%), char 523/3747 (13%) ]3374 (1%), char 5244659855445 (2663761 (100%), char 708/3747 (18%) ]7522 (4%), char 70986131991 (100%), char 752/3747 (20%) ]3073137 (2%), char 7542810 (10%), char 784/3747 (20%) ]366 (1%), char 787/3747 (21%) ]4933 (383925202958610 (10%), char 873/3747 (23%) ]717 (14%), char 87681 (100%), char 883/3747 (23%) ]9244033 (3%), char 885132 (5091842445 (22030585459 (11916538 (23660 (31024/3747 (27%) ]779 (1147830 (399825 (47285030 (39091960 (1106215 (65930[ line 53/174 (30%), col 1/1 (100671 [ line 54/174 (31%), col 1/38 (2859 (11996233 (32012748 (227[ line 58/174 (33%), col 1/1 (100683clock_gettime(CLOCK_REALTIME, &tStart);#ifdef MULTI_THREADEDpthread_t Threads[nThreads];// Initializing threadsfor (int i = 0; i < nThreads; i++){int pthread_ret = pthread_create(&Threads[i], NULL, ThreadJob, &nElements);if (pthread_ret){fprintf(stderr, "ERROR: pthread_create error code: %d.\n", pthread_re$exit(EXIT_FAILURE);}}// Wait until all threads are finishedfor (int i = 0; i < nThreads; i++){pthread_join(Threads[i], NULL);}#else// Executed in the same thread as the programTask(nElements);#endif// Finish time measurementclock_gettime(CLOCK_REALTIME, &tEnd);// Show the execution timedElapsedTimeS = (tEnd.tv_sec - tStart.tv_sec);dElapsedTimeS += (tEnd.tv_nsec - tStart.tv_nsec) / 1e+9; [ line 59/174 (33%), col 1/9 (11960422 (4711537 (293422 (33253643 (248[ line 64/174 (36%), col 1/10 (10846 [ line 65/174 (37%), col 1/92 (177633 (346597818 (5848997 (18944 (256441704018 (5872[ line 71/174 (40%), col 1/10 (109121 (104 [ line 73/174 (41%), col 1/47 (25423633[ line 75/174 (43%), col 1/10 (10714 [ line 76/174 (43%), col 1/48 (24[ line 77/174 (44%), col 1/10 (107085 [ line 78/174 (44%), col 1/6 (16119554 (178025 (4647167 (182[ line 82/174 (47%), col 1/1 (1009 [ line 83/174 (47%), col 1/35 (29048468188[ line 85/174 (48%), col 1/1 (100579 [ line 86/174 (49%), col 1/35 (2875055 (18650869341return 0;}void Task(unsigned int nElements){double  ** matrixA,** matrixB,** matrixResult;// InitializationmatrixA = MatrixInitialization(nElements, TRUE, time(NULL));matrixB = MatrixInitialization(nElements, TRUE, time(NULL));matrixResult = MatrixInitialization(nElements, FALSE, 0);if (!matrixA || !matrixB || !matrixResult){fprintf(stderr, "ERROR in Task: Cannot allocate memory\n");exit(EXIT_FAILURE);}// MultiplicationMatrixMultiplication(nElements, matrixA, matrixB, matrixResult);// DesctructionDestroyMatrix(nElements, matrixA);DestroyMatrix(nElements, matrixB);DestroyMatrix(nElements, matrixResult);}919 (19239018 (54122 (502005[ line 92/174 (52%), col 1/1 (107 [ line 93/174 (53%), col 1/34 (28442 (5042458 (34656573378[ line 98/174 (56%), col 1/1 (1009798100/174 (57%), col 1/26 (3961869 (1118280839624294513016156010 (10%), char 2345/3747 (62%) ]676 (1%), char 23487136 (241048210 (10%), char 2432/3747 (64%) ]9 (10510326 (3%), char 2436/3747 (65%) ]173 (155241 (100%), char 2521/3747 (67%) ]324 (4%), char 25224543 (23956758686119772 (50537081 (100%), char 2655/3747 (70%) ]}void Task(unsigned int nElements){double  ** matrixA,** matrixB,** matrixResult;// InitializationmatrixA = MatrixInitialization(nElements, TRUE, time(NULL));matrixB = MatrixInitialization(nElements, TRUE, time(NULL));matrixResult = MatrixInitialization(nElements, FALSE, 0);if (!matrixA || !matrixB || !matrixResult)fprintf(stderr, "ERROR in Task: Cannot allocate memory\n"); exit(EXIT_FAILURE); }// Multiplication MatrixMultiplication(nElements, matrixA, matrixB, matrixResult);DesctructionDestroyMatrix(nElements, matrixA);DestroyMatrix(nElements, matrixB);DestroyMatrix(nElements, matrixResult);}double getRandom(unsigned int min, unsigned int max){ // Pseudo random numbers in the interval [min,max]return min + (max - min) * ((double)rand()/(double)RAND_MAX);}double ** MatrixInitialization(unsigned int nElements, int random, unsigned int seed){double ** matrix = (double **) malloc(nElements * sizeof(double *));if (!matrix) return NULL;for (int i = 0; i < nElements; i++){ matrix[i] = (double *) malloc(nElements * sizeof(double)); if (!matrix) return NULL; if (random){ for (int j = 0; j < nElements; j++) {// Pseudo random numbers in the interval [1.0-2.0] matrix[i][j] = getRandom(1,2); } }}return matrix;9853 (1%), char 2656871 (100%), char 2655/3747 (70%) ]72 (50%), char 26536648 (21169535758453973424 (42221 (100%), char 2521/3747 (67%) ]1373 (1%), char 2455/3747 (65%) ]026 (3360921 (100%), char 2435/3747 (64%) ]80 (127136 (2%), char 24106076 (13482510 (10%), char 2345/3747 (62%) ]45951 (1%), char 2301/3747 (61%) ]36624259289180811860726 (309999/174 (56%), col 1/1 (1008587 [ line 97/174 (55%), col 1/33 (3786286454444 (5023334 (2083[ line 92/174 (52%), col 1/1 (1007 [ line 91/174 (52%), col 1/2 (55 pthread_t Threads[nThreads];// Initializing threads for (int i = 0; i < nThreads; i++) { int pthread_ret = pthread_create(&Threads[i], NULL, ThreadJob, &nElements);if (pthread_ret){fprintf(stderr, "ERROR: pthread_create error code: %d.\n", pthread_re$exit(EXIT_FAILURE); }}// Wait until all threads are finishedfor (int i = 0; i < nThreads; i++)pthread_join(Threads[i], NULL);}#else// Executed in the same thread as the programTask(nElements);#endifFinish time measurementclock_gettime(CLOCK_REALTIME, &tEnd);// Show the execution time dElapsedTimeS = (tEnd.tv_sec - tStart.tv_sec);dElapsedTimeS += (tEnd.tv_nsec - tStart.tv_nsec) / 1e+9;  return 0;}void Task(unsigned int nElements){double  ** matrixA, ** matrixB, ** matrixResult;// InitializationmatrixA = MatrixInitialization(nElements, TRUE, time(NULL));matrixB = MatrixInitialization(nElements, TRUE, time(NULL));matrixResult = MatrixInitialization(nElements, FALSE, 0);if (!matrixA || !matrixB || !matrixResult){fprintf(stderr, "ERROR in Task: Cannot allocate memory\n");exit(EXIT_FAILURE);}// MultiplicationMatrixMultiplication(nElements, matrixA, matrixB, matrixResult);// DesctructionDestroyMatrix(nElements, matrixA);DestroyMatrix(nElements, matrixB);DestroyMatrix(nElements, matrixResult);}0118 (51994899 (1128065 (34175886064935 (25849[ line 85/174 (48%), col 1/1 (1007 [ line 84/174 (48%), col 1/46 (218837357907[ line 82/174 (47%), col 1/1 (10089 [ line 81/174 (46%), col 1/7 (1420525 (647954 (1175846 (161[ line 77/174 (44%), col 1/10 (1008 [ line 76/174 (43%), col 1/48 (26744[ line 75/174 (43%), col 1/10 (101 [ line 74/174 (42%), col 1/43 (2353317592[ line 72/174 (41%), col 1/1 (1004100 (11 [ line 70/174 (40%), col 1/18 (587693944 (2641897 (1488397818 (546733 (365592 (13877[ line 64/174 (36%), col 1/10 (1046 [ line 63/174 (36%), col 1/43 (24852532 (32317 (2294void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurementclock_gettime(CLOCK_REALTIME, &tStart);#ifdef MULTI_THREADED0422 (4713student@2ac:~/files-Batch2$ nano -c exercise1_mh.c lscp ./exercise1.c ./exercise1_mh.cexercise1.ctime ./exercise1lsgcc exercise1.o -o exercise1-c exercise1.c_1.c1.c_.cmh.c.cc
student@2ac:~/files-Batch2$ gcc -c exercise1_mh.cnano -c exercise1_mh.c lscp ./exercise1.c ./exercise1_mh.cexercise1.ctime ./exercise1lsgcc exercise1.o -o exercise1_Mmh.o_mh
exercise1_mh.o: In function `main':
exercise1_mh.c:(.text+0x12c): undefined reference to `pthread_create'
exercise1_mh.c:(.text+0x184): undefined reference to `pthread_join'
collect2: error: ld returned 1 exit status
student@2ac:~/files-Batch2$ gcc exercise1_mh.o -o exercise1_mh-c exercise1_mh.cnano -c exercise1_mh.c 
[ Reading File ][ Read 173 lines ]  GNU nano 2.5.3                 File: exercise1_mh.c                                         #include <stdio.h>#include <stdlib.h>#include <time.h>#include <errno.h>/////////////////////////////////////////////////////////// UNCOMMENT FOR MULTITHREADED VERSION/////////////////////////////////////////////////////////#define MULTI_THREADED/////////////////////////////////////////////////////////// CHANGE IT WITH YOUR OWN ID/////////////////////////////////////////////////////////const unsigned int DNI = 7178934;#define TRUE 1#define FALSE 0const unsigned int N = 650;void Task(unsigned int);void MatrixMultiplication(unsigned int, double **, double **, double **);double ** MatrixInitialization(unsigned int, int, unsigned int);void DestroyMatrix(unsigned int, double **);#ifdef MULTI_THREADED#include <pthread.h>void * ThreadJob(void * arg){unsigned long nElements = *((unsigned long*)arg);Task(nElements);return NULL;}#endifint main(int argc, char* argv[]){unsigned long nElements = DNI/50000;unsigned int nThreads = DNI%10;struct timespec tStart, tEnd;double dElapsedTimeS; #ifdef MULTI_THREADEDif (nThreads<2) nThreads = 7;printf("Running with %d thread(s)...\n", nThreads); #endifprintf("Running task    : ");//Start time measurementclock_gettime(CLOCK_REALTIME, &tStart);^G Get Help    ^O Write Out   ^W Where Is    ^K Cut Text    ^J Justify     ^C Cur Pos^X Exit^R Read File   ^\ Replace     ^U Uncut Text  ^T To Spell    ^_ Go To Line[ line 2/174 (1%), col 1/20 (5%), char 19/3747 (0%) ]31831429575 (100%), char 76/3747 (2%) ]6358 (1%), char 777439 (2135/3747 (3%) ]858 (17449523 (42326[ line 101 (100%), char 255/3747 (6%) ]1658 (1%), char 256230 (331483758 (1494834 (240210%) ][ line 15/174 (8%), col 1/1 (100361697 [ line 17/174 (9%), col 1/15 (68[ line 18/174 (1065329 (100%), char 469/3747 (12%) ]20128 (3%), char 470125 (498321 (100%), char 523/3747 (13%) ]3374 (1%), char 5244659855445 (2663761 (100%), char 708/3747 (18%) ]7522 (4%), char 70986131991 (100%), char 752/3747 (20%) ]3073137 (2%), char 7542810 (10%), char 784/3747 (20%) ]366 (1%), char 787/3747 (21%) ]4933 (383925202958610 (10%), char 873/3747 (23%) ]717 (14%), char 87681 (100%), char 883/3747 (23%) ]9244033 (3%), char 885132 (5091842445 (22030585459 (11916538 (23660 (31024/3747 (27%) ]779 (1147830 (399825 (47285030 (39091960 (1106215 (65930[ line 53/174 (30%), col 1/1 (100671 [ line 54/174 (31%), col 1/38 (2859 (11996233 (32012748 (227[ line 58/174 (33%), col 1/1 (100683clock_gettime(CLOCK_REALTIME, &tStart);#ifdef MULTI_THREADEDpthread_t Threads[nThreads];// Initializing threadsfor (int i = 0; i < nThreads; i++){int pthread_ret = pthread_create(&Threads[i], NULL, ThreadJob, &nElements);if (pthread_ret){fprintf(stderr, "ERROR: pthread_create error code: %d.\n", pthread_re$exit(EXIT_FAILURE);}}// Wait until all threads are finishedfor (int i = 0; i < nThreads; i++){pthread_join(Threads[i], NULL);}#else// Executed in the same thread as the programTask(nElements);#endif// Finish time measurementclock_gettime(CLOCK_REALTIME, &tEnd);// Show the execution timedElapsedTimeS = (tEnd.tv_sec - tStart.tv_sec);dElapsedTimeS += (tEnd.tv_nsec - tStart.tv_nsec) / 1e+9; [ line 59/174 (33%), col 1/9 (11961537 (293422 (33253643 (248[ line 64/174 (36%), col 1/10 (10846 [ line 65/174 (37%), col 1/92 (177633 (346597818 (5848997 (18944 (256441704018 (5872[ line 71/174 (40%), col 1/10 (109121 (104 [ line 73/174 (41%), col 1/47 (25423633[ line 75/174 (43%), col 1/10 (10714 [ line 76/174 (43%), col 1/48 (24[ line 77/174 (44%), col 1/10 (107085 [ line 78/174 (44%), col 1/6 (16119554 (178025 (4647167 (182[ line 82/174 (47%), col 1/1 (1009 [ line 83/174 (47%), col 1/35 (29048468188[ line 85/174 (48%), col 1/1 (100579 [ line 86/174 (49%), col 1/35 (2875055 (18650869341return 0;}void Task(unsigned int nElements){double  ** matrixA,** matrixB,** matrixResult;// InitializationmatrixA = MatrixInitialization(nElements, TRUE, time(NULL));matrixB = MatrixInitialization(nElements, TRUE, time(NULL));matrixResult = MatrixInitialization(nElements, FALSE, 0);if (!matrixA || !matrixB || !matrixResult){fprintf(stderr, "ERROR in Task: Cannot allocate memory\n");exit(EXIT_FAILURE);}// MultiplicationMatrixMultiplication(nElements, matrixA, matrixB, matrixResult);// DesctructionDestroyMatrix(nElements, matrixA);DestroyMatrix(nElements, matrixB);DestroyMatrix(nElements, matrixResult);}919 (19239018 (54122 (502005[ line 92/174 (52%), col 1/1 (107 [ line 93/174 (53%), col 1/34 (28442 (5042458 (34656573378[ line 98/174 (56%), col 1/1 (1009798100/174 (57%), col 1/26 (3961869 (1118280839624294513016156010 (10%), char 2345/3747 (62%) ]676 (1%), char 23487136 (241048210 (10%), char 2432/3747 (64%) ]9 (10510326 (3%), char 2436/3747 (65%) ]173 (155241 (100%), char 2521/3747 (67%) ]324 (4%), char 25224543 (23956758686119772 (50537081 (100%), char 2655/3747 (70%) ]}void Task(unsigned int nElements){double  ** matrixA,** matrixB,** matrixResult;// InitializationmatrixA = MatrixInitialization(nElements, TRUE, time(NULL));matrixB = MatrixInitialization(nElements, TRUE, time(NULL));matrixResult = MatrixInitialization(nElements, FALSE, 0);if (!matrixA || !matrixB || !matrixResult)fprintf(stderr, "ERROR in Task: Cannot allocate memory\n"); exit(EXIT_FAILURE); }// Multiplication MatrixMultiplication(nElements, matrixA, matrixB, matrixResult);DesctructionDestroyMatrix(nElements, matrixA);DestroyMatrix(nElements, matrixB);DestroyMatrix(nElements, matrixResult);}double getRandom(unsigned int min, unsigned int max){ // Pseudo random numbers in the interval [min,max]return min + (max - min) * ((double)rand()/(double)RAND_MAX);}double ** MatrixInitialization(unsigned int nElements, int random, unsigned int seed){double ** matrix = (double **) malloc(nElements * sizeof(double *));if (!matrix) return NULL;for (int i = 0; i < nElements; i++){ matrix[i] = (double *) malloc(nElements * sizeof(double)); if (!matrix) return NULL; if (random){ for (int j = 0; j < nElements; j++) {// Pseudo random numbers in the interval [1.0-2.0] matrix[i][j] = getRandom(1,2); } }}return matrix;9853 (1%), char 2656202 (5070921959 (1112707063332 (508265411 (100%), char 2828/3747 (75%) ]596286 (1%), char 283072 (5091678377 (189421 (489309 (3300280151 (100%), char 3017/3747 (80%) ]244 (2%), char 30183610 (10%), char 3055/3747 (81%) ]4775 (1%), char 3058529 (311936837 (23471 (100%), char 3150/3747 (84%) ]8928 (3%), char 3151918 (565408060 (191126 (32085283 (113326687426 (330385318 (5860 (10%), char 3312/3747 (88%) ]74 (1058523 (4%), char 3316}void MatrixMultiplication(unsigned int nElements, double ** A, double ** B, double ** R){for (int i = 0; i < nElements; i++){for (int j = 0; j < nElements; j++){R[i][j] = 0;for (int k = 0; k < nElements; k++){R[i][j] += A[i][k] * B[k][j];}}}}void DestroyMatrix(unsigned int nElements, double ** M){for (int i = 0; i < nElements; i++){free(M[i]);}free(M);}9 (503251689 (159272 (5042491344 (264810 (10%), char 3463/3747 (92%) ]5952 (1%), char 3466618 (5504379037 (28860 (12449126 (36356062 (181226 (360262318 (5730 (10%), char 3611/3747 (96%) ]442 (50%), char 361451 (100%), char 3616/3747 (96%) ]6556 (1%), char 361772 (507388644 (25 [ XOFF ignored, mumble mumble ]student@2ac:~/files-Batch2$ nano -c exercise1_mh.c gcc exercise1_mh.o -o exercise1_mh-c exercise1_mh.cexercise1_mh.o -o exercise1_mh -lphtreagthread
student@2ac:~/files-Batch2$ ./time :./exercise1_mh 
Running with 4 thread(s)...
Running task    : 
real0m0.068s
user0m0.100s
sys0m0.020s
student@2ac:~/files-Batch2$ time ./exercise1_mh 
Running with 4 thread(s)...
Running task    : 
real0m0.072s
user0m0.100s
sys0m0.012s
student@2ac:~/files-Batch2$ time ./exercise1_mh 
Running with 4 thread(s)...
Running task    : 
real0m0.097s
user0m0.124s
sys0m0.016s
student@2ac:~/files-Batch2$ time ./exercise1_mh 
Running with 4 thread(s)...
Running task    : 
real0m0.084s
user0m0.132s
sys0m0.000s
student@2ac:~/files-Batch2$ time ./exercise1_mh 
Running with 4 thread(s)...
Running task    : 
real0m0.072s
user0m0.108s
sys0m0.016s
student@2ac:~/files-Batch2$ gcc ex-xc exercise2.c 
student@2ac:~/files-Batch2$ gcc erxer^C
student@2ac:~/files-Batch2$ gcc exercise2.o -o exercise2.2
student@2ac:~/files-Batch2$ gcc .c-c exercise2.c -pg -o exercise2.
student@2ac:~/files-Batch2$ grpofprof ./erxcercise2
gmon.out: No such file or directory
student@2ac:~/files-Batch2$ gprof ./exercise2cc -c exercise2.c -pg -o exercise2
student@2ac:~/files-Batch2$ gcc exercise2.c -pg -o exercise2prof ./exercise2
gmon.out: No such file or directory
student@2ac:~/files-Batch2$ ls
core            exercise1     exercise1_mh.c  exercise2    exercise3.asm  exercise5.c
data.xls        exercise1.c   exercise1_mh.o  exercise2.c  exercise4.asm  exercise5.o
exa2-gprof.txt  exercise1_mh  exercise1.o     exercise2.o  exercise5
student@2ac:~/files-Batch2$ lsgprof ./exercise2cc exercise2.c -pg -o exercise2
student@2ac:~/files-Batch2$ gcc exercise2.c -pg -o exercise2lsgprof ./exercise2
gmon.out: No such file or directory
student@2ac:~/files-Batch2$ gprof ./exercise2./exercise2
-bash: gprof./exercise2: No such file or directory
student@2ac:~/files-Batch2$ gprof./exercise2 ./exercise2
gmon.out: No such file or directory
student@2ac:~/files-Batch2$ gprof ./exercise2./exercise2nanpo -c exercise2.c
[ Reading File ][ Read 63 lines  GNU nano 2.5.3                  File: exercise2.c                                           #include <stdio.h>#include <stdlib.h>#include <time.h>#include <unistd.h>void fillArrayWithRandomNumbers(int size) {for (int i = 0; i < 10000; i++) {int* array = (int*)malloc(size * sizeof(int));if (array == NULL) {perror("Error while allocating memory");exit(1);}for (int i = 0; i < size; i++) {array[i] = rand() % 100;}free(array);}    }void performRandomOperations() {for (int i = 0; i < 10000; i++) {int a = rand() % 100;int b = rand() % 100;int result = a * b;}}void performRandomMathCalculations() {for (int i = 0; i < 10000; i++) {double x = (rand() % 1000) / 10.0;double y = (rand() % 1000) / 10.0;double result = x + y;performRandomOperations();}}void processData() {for (int i = 0; i < 100000; i++) {double x = (rand() % 1000) / 10.0;double y = (rand() % 1000) / 10.0;double result = x * y;}}int main() {printf("Running function %d...\n", 1);fillArrayWithRandomNumbers(10000);printf("Running function %d...\n", 2);performRandomMathCalculations();printf("Running function %d...\n", 3);processData();^G Get Help    ^O Write Out   ^W Where Is    ^K Cut Text    ^J Justify     ^C Cur Pos^X Exit^R Read File   ^\ Replace     ^U Uncut Text  ^T To Spell    ^_ Go To Line[ line 2/64 (3%), col 1/20 (5%), char 19/1374 (1%) ]3/64 (418324/64 (620574[ line 5/64 (7%), col 1/1 (10075 [ line 6/64 (9%), col 1/44 (28[ line 7/64 (1038122/1374 (8%) ][ line 8/64 (12%), col 1/55 (1%), char 160/1374 (119429 (3215510/64 (15%), col 1/53 (1%), char 244/1374 (17%) ]1721 (49721[ line 12/64 (18%), col 1/10 (1031833/64 (20 (102 [ line 14/64 (21%), col 1/41 (295337706[ line 16/64 (25%), col 1/10 (10407976 (10130 [ line 18/64 (28%), col 1/21 (48[ line 19/64 (29%), col 1/10 (10391 [ line 20/64 (31%), col 1/2 (542[ line 21/64 (32%), col 1/1 (1051242 [ line 23/64 (35%), col 1/33 (33478 (2865590 (352486/64 (40540[ line 27/64 (42%), col 1/1 (10082 [ line 28/64 (43%), col 1/28 (35956 (1661343062 (5095[ line 31/64 (48%), col 1/1 (1021 [ line 32/64 (50%), col 1/39 (22318618434399505474246631 (3857775 (28169896 (1644619/64 (602 (5050[ line 40/64 (62%), col 1/1 (1022 [ line 41/64 (64%), col 1/21 (432539 (274337439136485695/64 (7031 (39972[ line 46/64 (71%), col 1/6 (16%), char 10304732 (5065851 (100%), char 1038/1374 (75%) ]963 (7%), char 103950847 (2526193992/64 (811 (100%), char 1135/1374 (82%) ]3247 (2%), char 113644175551 (100%), char 1217/1374 (88%) ]6747 (2%), char 12187923 (45918/64 (901 (100%), char 1281/1374 (93%) ]printf("Running function %d...\n", 4);performRandomOperations();return 0;}9247 (2%), char 128260335326151 (100%), char 1357/1374 (98%) ]264 (7%), char 1358382 (50729[ line 64/64 (1001 (100%), char 1374/1374 (100%) ]student@2ac:~/files-Batch2$ nano -c exercise2.cgprof ./exercise2./exercise2 ./exercise2cc exercise2.c -pg -o exercise2.o
student@2ac:~/files-Batch2$ gccn egcc exerercise2cise12.c 